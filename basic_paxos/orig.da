import sys
from random import randint

def anyof(s):
  """return any element of set s if s is not empty or 'None' otherwise"""
  return next(iter(s)) if s else None

class Proposer(process):
  def setup(acceptors):
    self.n = None              # proposal number
    self.majority = acceptors  # majority of acceptors; all in other papers

  def run():
    n = self
    send(('prepare', n), to= majority)

    if await(len(setof(a, received(('respond', _n, _), from_= a)))
             > len(acceptors)/2):
      v = anyof(setof(v, received(('respond', _n, (n2,v))),
                      n2==max(setof(n2, received(('respond', _n, (n2,_))))))
                or {randint(1,100)})  # or any value, here in 1..100
      responded = setof(a, received(('respond', _n, _), from_= a))
      send(('accept', n, v), to= responded)
      output('### chose', n, v)

class Acceptor(process):
  def setup(learners): pass

  def run(): await(False)

  def receive(msg= ('prepare', n), from_= p):
    if each(sent(('respond', n2, _)), has= n > n2):
        max_prop = anyof(setof((n,v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
        send(('respond', n, max_prop), to= p)

  def receive(msg= ('accept', n, v)):
    if not some(sent(('respond', n2, _)), has= n2 > n):
      send(('accepted', n, v), to= learners)

class Learner(process):
  def setup(acceptors): pass

  def run():
    if await(some(received(('accepted', n, v)), has=
                  len(setof(a, received(('accepted', _n, _v), from_= a)))
                  > len(acceptors)/2)):
      output('learned', n, v)

def main():
  nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
  nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 3
  nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3

  acceptors = new(Acceptor, num= nacceptors)
  proposers = new(Proposer, (acceptors,), num= nproposers)
  learners = new(Learner, (acceptors,), num= nlearners)
  setup(acceptors, (learners,))
  start(proposers | acceptors | learners)

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and running of given numbers of Proposer,
# Acceptor, and Learner processes and outputting the result.
